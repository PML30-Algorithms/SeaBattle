module source.artemIntelligence;

import std.stdio;
import std.algorithm;
import std.math;
import std.random;
import std.conv;
import std.random;


import source.seabattle;

class NewSuperPlayer : Player
{
    int curRow,curCol;

    override Board battleMove()
    {
        bool blood = false;
        int srow,int scol;

        void Hunt (ref int srow, ref int scol)
        {
            int shots = 0;
            while (shots < myBoard.MaxShots())
            {
                do
                {
                        srow = uniform(0, ROWS);
                        scol = uniform(0, COLS);
                }
                while ( enemyBoard.hits[curRow][curCol] == 'X');
                enemyBoard.hits[curRow][curCol] = 'Y';
                shots++;
                /*Если мы попали blood = true; */
            }
        }

        Deny(int srow, int scol )
        {
            for (int d=0;d<MaxShots; d++)
                if (board[curRow +Drow[d]][curCol + Dcol[d]]!= 'X')
                    board[curRow +Drow[d]][curCol + Dcol[d]]!= 'Y'

            for (int row =0;row  < ROWS; row++)
                for ( int col = 0; col < COLS; col ++)
                    if ( board.hits [row][col] == 'Y' )
                        board.hits[row][col] = 'X';


        }

        void main_shoot ()
        {
            while( blood == false )
                Hunt;
            if (blood == true)
                Deny(curRow, curCol);
        }




        return enemyBoard;
    }

    void get_ship(ref Board board, int sum) {


    }

    override Board prepareMove()
    {
        initBoard (myBoard);
        initBoard (enemyBoard);




        return myBoard;
    }

     override void updateEnemyMove (Board newMyBoard)
    {
        myBoard = newMyBoard;
    }

    override void updateMyMove (Board newEnemyBoard)
    {
        enemyBoard = newEnemyBoard;
    }

};

